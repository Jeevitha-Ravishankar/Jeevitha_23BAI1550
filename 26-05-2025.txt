// CREATE,ALTER,UPDATE,DELETE,DESCRIBE USING CUSTOMISED USER INPUT

package crud_operation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Scanner;

public class CRUD_Operation {

    public static void main(String[] args) {
        CRUD_Operation objTest = new CRUD_Operation();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nChoose operation:");
            System.out.println("1. Create Data (Insert)");
            System.out.println("2. Read Data (Display All)");
            System.out.println("3. Read Data (By Student ID)");
            System.out.println("4. Update Data");
            System.out.println("5. Alter Table");
            System.out.println("6. Describe Table");
            System.out.println("7. Delete Data");
            System.out.println("8. Exit");
            System.out.print("Enter your choice: ");

            int operationChoice = scanner.nextInt();

            switch (operationChoice) {
                case 1:
                    System.out.println("\nChoose input type:");
                    System.out.println("1. User Input");
                    System.out.println("2. Predefined Input");
                    System.out.print("Enter choice (1 or 2): ");
                    int inputChoice = scanner.nextInt();

                    if (inputChoice == 1) {
                        System.out.print("How many students do you want to enter? ");
                        int numberOfStudents = scanner.nextInt();

                        for (int i = 1; i <= numberOfStudents; i++) {
                            System.out.println("\nEnter details for student " + i + ":");

                            System.out.print("Enter Student ID: ");
                            int id = scanner.nextInt();
                            scanner.nextLine();

                            System.out.print("Enter Student Name: ");
                            String name = scanner.nextLine();

                            System.out.print("Enter Student Marks: ");
                            int marks = scanner.nextInt();

                            objTest.create_data(id, name, marks);
                        }
                    } else if (inputChoice == 2) {
                        objTest.create_data(103, "manoj", 99);
                        objTest.create_data(104, "karthick", 100);
                    } else {
                        System.out.println("Invalid input type.");
                    }
                    break;

                case 2:
                    objTest.read_data();
                    break;

                case 3:
                    System.out.print("Enter student ID to fetch: ");
                    int id = scanner.nextInt();
                    objTest.read_data_with_condition(id);
                    break;

                case 4:
                    System.out.print("Enter existing student ID: ");
                    int oldId = scanner.nextInt();
                    scanner.nextLine();

                    System.out.print("Enter new student ID: ");
                    int newId = scanner.nextInt();
                    scanner.nextLine();

                    System.out.print("Enter new student name: ");
                    String newName = scanner.nextLine();

                    objTest.update_data(oldId, newId, newName);
                    break;

                case 5:
                    objTest.alter_table();
                    break;

                case 6:
                    objTest.describe_table();
                    break;

                case 7:
                    System.out.print("Enter the student ID to delete: ");
                    int delId = scanner.nextInt();
                    objTest.delete_data(delId);
                    break;

                case 8:
                    System.out.println("Exiting...");
                    scanner.close();
                    System.exit(0);

                default:
                    System.out.println("Invalid operation.");
            }
        }
    }

    public void create_data(int id, String name, int marks) {
        DB_Connection obj_DB_Connection = new DB_Connection();
        Connection connection = obj_DB_Connection.get_connection();
        PreparedStatement ps = null;

        try {
            String query = "INSERT INTO students (id, name, marks) VALUES (?, ?, ?)";
            ps = connection.prepareStatement(query);
            ps.setInt(1, id);
            ps.setString(2, name);
            ps.setInt(3, marks);

            System.out.println(ps);
            ps.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void read_data() {
        DB_Connection obj_DB_Connection = new DB_Connection();
        Connection connection = obj_DB_Connection.get_connection();
        Statement stmt = null;
        ResultSet rs = null;

        try {
            String query = "SELECT * FROM students";
            stmt = connection.createStatement();
            rs = stmt.executeQuery(query);

            System.out.println("\nStudent Records:");
            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("name");
                int marks = rs.getInt("marks");
                System.out.println("ID: " + id + ", Name: " + name + ", Marks: " + marks);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void read_data_with_condition(int id) {
        DB_Connection obj_DB_Connection = new DB_Connection();
        Connection connection = obj_DB_Connection.get_connection();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            String query = "SELECT * FROM students WHERE id = ?";
            ps = connection.prepareStatement(query);
            ps.setInt(1, id);
            rs = ps.executeQuery();

            System.out.println("\nStudent Record:");
            if (rs.next()) {
                String name = rs.getString("name");
                int marks = rs.getInt("marks");
                System.out.println("ID: " + id + ", Name: " + name + ", Marks: " + marks);
            } else {
                System.out.println("No student found with ID: " + id);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void update_data(int sl_no, int new_sl_no, String name) {
        DB_Connection obj_DB_Connection = new DB_Connection();
        Connection connection = obj_DB_Connection.get_connection();
        PreparedStatement ps = null;

        try {
            String query = "update students set id = ?, name = ? where id = ?";
            ps = connection.prepareStatement(query);
            ps.setInt(1, new_sl_no);
            ps.setString(2, name);
            ps.setInt(3, sl_no);
            System.out.println(ps);
            ps.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void alter_table() {
        DB_Connection obj_DB_Connection = new DB_Connection();
        Connection connection = obj_DB_Connection.get_connection();
        PreparedStatement ps = null;

        try {
            String query = "ALTER TABLE students ADD email VARCHAR(50)";
            ps = connection.prepareStatement(query);
            ps.executeUpdate();
            System.out.println("Column 'email' added successfully to student table.");
        } catch (Exception e) {
            System.out.println("Error (maybe column already exists): " + e);
        }
    }

    public void describe_table() {
        DB_Connection obj_DB_Connection = new DB_Connection();
        Connection connection = obj_DB_Connection.get_connection();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            String query = "DESCRIBE students";
            ps = connection.prepareStatement(query);
            rs = ps.executeQuery();

            System.out.println("\nTable Structure (DESCRIBE student):");
            System.out.println("Field\tType\tNull\tKey\tDefault\tExtra");
            while (rs.next()) {
                for (int i = 1; i <= 6; i++) {
                    Object value = rs.getObject(i);
                    System.out.print(value + "\t");
                }
                System.out.println();
            }
        } catch (Exception e) {
            System.out.println("Error describing table: " + e);
        }
    }

    public void delete_data(int s_id) {
        DB_Connection obj_DB_Connection = new DB_Connection();
        Connection connection = obj_DB_Connection.get_connection();
        PreparedStatement ps = null;
        try {
            String query = "delete from students where id = ?";
            ps = connection.prepareStatement(query);
            ps.setInt(1, s_id);
            System.out.println(ps);
            ps.executeUpdate();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
